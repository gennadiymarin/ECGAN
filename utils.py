import torch
from torch import nn
import cv2 as cv
import numpy as np
import torchvision.transforms as T


def toRGB(x):
    return ((x + 1) / 2 * 255).to(torch.uint8)


def RGB2n(img_seg, labels):
    """
    img_seg: Bx3xHxW in 0..255
    labels: 19x3
    """
    x = img_seg.permute(0, 2, 3, 1)  # BxHxWx3
    res = (x.unsqueeze(-2).repeat(1, 1, 1, labels.size(0), 1) == labels)  # BxHxWx19x3
    return torch.all(res, dim=-1).permute(0, 3, 1, 2).float()


class Canny(nn.Module):
    def __init__(self, t_low=100, t_high=200):
        super().__init__()
        self.t_low = t_low
        self.t_high = t_high

    @torch.no_grad()
    def forward(self, x):
        """
        x: (B, C, H, W) in (-1, 1)
        """
        device = x.device
        B, C, H, W = x.shape
        img = x.permute((0, 2, 3, 1))
        img = toRGB(img).detach().cpu().numpy()
        img = img.reshape(B * H, W, C)
        edges = cv.Canny(img, self.t_low, self.t_high)
        edges = torch.tensor(edges.reshape(B, H, W)).unsqueeze(1)
        edges = edges.repeat(1, 3, 1, 1).to(device).float() / 255
        return T.Normalize(0.5, 0.5)(edges)


def logits2seg(logits, palette):
    """
    :param logits: Bx19xHxW
    :param palette: 19x3
    :return: Bx3xHxW
    """
    predicted_segmentation_maps = logits.argmax(dim=1).numpy()  # B x H x W

    color_segs = np.zeros((predicted_segmentation_maps.shape[0],
                           predicted_segmentation_maps.shape[1],
                           predicted_segmentation_maps.shape[2], 3), dtype=np.uint8)  # B x H x W x 3

    palette = np.array(palette)
    for label, color in enumerate(palette):
        color_segs[predicted_segmentation_maps == label, :] = color

    color_segs = torch.tensor(color_segs).permute(0, 3, 1, 2)  # B x 3 x H x W

    return color_segs


def get_palette(name):
    if name == 'cityscapes':
        return [
            [128, 64, 128],
            [244, 35, 232],
            [70, 70, 70],
            [102, 102, 156],
            [190, 153, 153],
            [153, 153, 153],
            [250, 170, 30],
            [220, 220, 0],
            [107, 142, 35],
            [152, 251, 152],
            [70, 130, 180],
            [220, 20, 60],
            [255, 0, 0],
            [0, 0, 142],
            [0, 0, 70],
            [0, 60, 100],
            [0, 80, 100],
            [0, 0, 230],
            [119, 11, 32],
        ]
    if name == 'ade20k':
        return [[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5], [6, 6, 6], [7, 7, 7], [8, 8, 8], [9, 9, 9],
                [10, 10, 10], [11, 11, 11], [12, 12, 12], [13, 13, 13], [14, 14, 14], [15, 15, 15], [16, 16, 16],
                [17, 17, 17], [18, 18, 18], [19, 19, 19], [20, 20, 20], [21, 21, 21], [22, 22, 22], [23, 23, 23],
                [24, 24, 24], [25, 25, 25], [26, 26, 26], [27, 27, 27], [28, 28, 28], [29, 29, 29], [30, 30, 30],
                [31, 31, 31], [32, 32, 32], [33, 33, 33], [34, 34, 34], [35, 35, 35], [36, 36, 36], [37, 37, 37],
                [38, 38, 38], [39, 39, 39], [40, 40, 40], [41, 41, 41], [42, 42, 42], [43, 43, 43], [44, 44, 44],
                [45, 45, 45], [46, 46, 46], [47, 47, 47], [48, 48, 48], [49, 49, 49], [50, 50, 50], [51, 51, 51],
                [52, 52, 52], [53, 53, 53], [54, 54, 54], [55, 55, 55], [56, 56, 56], [57, 57, 57], [58, 58, 58],
                [59, 59, 59], [60, 60, 60], [61, 61, 61], [62, 62, 62], [63, 63, 63], [64, 64, 64], [65, 65, 65],
                [66, 66, 66], [67, 67, 67], [68, 68, 68], [69, 69, 69], [70, 70, 70], [71, 71, 71], [72, 72, 72],
                [73, 73, 73], [74, 74, 74], [75, 75, 75], [76, 76, 76], [77, 77, 77], [78, 78, 78], [79, 79, 79],
                [80, 80, 80], [81, 81, 81], [82, 82, 82], [83, 83, 83], [84, 84, 84], [85, 85, 85], [86, 86, 86],
                [87, 87, 87], [88, 88, 88], [89, 89, 89], [90, 90, 90], [91, 91, 91], [92, 92, 92], [93, 93, 93],
                [94, 94, 94], [95, 95, 95], [96, 96, 96], [97, 97, 97], [98, 98, 98], [99, 99, 99], [100, 100, 100],
                [101, 101, 101], [102, 102, 102], [103, 103, 103], [104, 104, 104], [105, 105, 105], [106, 106, 106],
                [107, 107, 107], [108, 108, 108], [109, 109, 109], [110, 110, 110], [111, 111, 111], [112, 112, 112],
                [113, 113, 113], [114, 114, 114], [115, 115, 115], [116, 116, 116], [117, 117, 117], [118, 118, 118],
                [119, 119, 119], [120, 120, 120], [121, 121, 121], [122, 122, 122], [123, 123, 123], [124, 124, 124],
                [125, 125, 125], [126, 126, 126], [127, 127, 127], [128, 128, 128], [129, 129, 129], [130, 130, 130],
                [131, 131, 131], [132, 132, 132], [133, 133, 133], [134, 134, 134], [135, 135, 135], [136, 136, 136],
                [137, 137, 137], [138, 138, 138], [139, 139, 139], [140, 140, 140], [141, 141, 141], [142, 142, 142],
                [143, 143, 143], [144, 144, 144], [145, 145, 145], [146, 146, 146], [147, 147, 147], [148, 148, 148],
                [149, 149, 149], [150, 150, 150]]

    raise ValueError
